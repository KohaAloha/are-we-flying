"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RawBuffer = void 0;
const ByteBuffer = require("bytebuffer");
class RawBuffer {
    constructor(b) {
        /** @deprecated use readInt32() instead */
        this.readInt = this.readInt32;
        /** @deprecated use writeInt32() instead */
        this.writeInt = this.writeInt32;
        /** @deprecated use readInt64() instead */
        this.readLong = this.readInt64;
        /** @deprecated use writeInt64() instead */
        this.writeLong = this.writeInt64;
        /** @deprecated use readFloat32() instead */
        this.readFloat = this.readFloat32;
        /** @deprecated use writeFloat32() instead */
        this.writeFloat = this.writeFloat32;
        /** @deprecated use readFloat64() instead */
        this.readDouble = this.readFloat64;
        /** @deprecated use writeFloat64() instead */
        this.writeDouble = this.writeFloat64;
        if (typeof b === 'number') {
            this.buffer = ByteBuffer.allocate(b).LE(true);
        }
        else {
            this.buffer = ByteBuffer.wrap(b).LE(true);
        }
    }
    clear() {
        this.buffer.clear();
    }
    setOffset(offset) {
        this.buffer.offset = offset;
    }
    flip() {
        this.buffer.flip();
    }
    getOffset() {
        return this.buffer.offset;
    }
    getBuffer() {
        this.buffer.flip();
        return this.buffer.toBuffer(true);
    }
    write(bytes) {
        this.buffer.append(bytes);
    }
    writeByte(byte) {
        this.buffer.writeByte(byte);
    }
    readBytes(length) {
        const bytes = this.buffer.readBytes(length).copy();
        return bytes.toBuffer();
    }
    readInt32() {
        return this.buffer.readInt32();
    }
    writeInt32(value, offset) {
        this.buffer.writeInt32(value, offset);
    }
    readInt64() {
        return this.buffer.readInt64().toNumber();
    }
    writeInt64(value) {
        this.buffer.writeInt64(value);
    }
    readFloat32() {
        return this.buffer.readFloat32();
    }
    writeFloat32(value) {
        this.buffer.writeFloat32(value);
    }
    readFloat64() {
        return this.buffer.readFloat64();
    }
    writeFloat64(value) {
        this.buffer.writeFloat64(value);
    }
    writeString(value, fixedLength) {
        putString(this.buffer, value, fixedLength || value.length);
    }
    readString8() {
        return makeString(this.buffer, 8);
    }
    writeString8(value) {
        putString(this.buffer, value, 8);
    }
    writeString30(value) {
        putString(this.buffer, value, 30);
    }
    readString32() {
        return makeString(this.buffer, 32);
    }
    writeString32(value) {
        putString(this.buffer, value, 32);
    }
    readString64() {
        return makeString(this.buffer, 64);
    }
    writeString64(value) {
        putString(this.buffer, value, 64);
    }
    readString128() {
        return makeString(this.buffer, 128);
    }
    writeString128(value) {
        putString(this.buffer, value, 128);
    }
    readString256() {
        return makeString(this.buffer, 256);
    }
    writeString256(value) {
        putString(this.buffer, value, 256);
    }
    readString260() {
        return makeString(this.buffer, 260);
    }
    writeString260(value) {
        putString(this.buffer, value, 260);
    }
    readStringV() {
        let bytesRead = 0;
        let strLen = 0;
        let endFound = false;
        while (this.buffer.offset < this.buffer.limit) {
            const currentByte = this.buffer.readByte();
            bytesRead++;
            if (endFound && currentByte !== 0) {
                break; // Reached beginning of new value
            }
            else if (currentByte === 0) {
                endFound = true;
            }
            strLen++;
        }
        // Reset offset so we can read the same bytes later
        this.buffer.offset -= bytesRead;
        return makeString(this.buffer, strLen);
    }
    readString(length) {
        return makeString(this.buffer, length);
    }
    remaining() {
        return this.buffer.remaining();
    }
}
exports.RawBuffer = RawBuffer;
function makeString(bf, expectedLength) {
    const content = bf.readCString(bf.offset);
    bf.skip(expectedLength);
    return content.string;
}
function putString(bf, s, fixed) {
    const value = s === null ? '' : s;
    const bytes = Buffer.from(value, 'utf-8');
    bf.append(bytes);
    if (bytes.length < fixed) {
        for (let i = 0; i < fixed - bytes.length; i++) {
            bf.writeByte(0x00);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,