"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimConnectConnection = void 0;
const events_1 = require("events");
const SimConnectDataType_1 = require("./enums/SimConnectDataType");
const RawBuffer_1 = require("./RawBuffer");
const connectionParameters_1 = require("./connectionParameters");
const TextType_1 = require("./enums/TextType");
const Protocol_1 = require("./enums/Protocol");
const SimConnectSocket_1 = require("./SimConnectSocket");
const recv_1 = require("./recv");
const DataSetFlag_1 = require("./flags/DataSetFlag");
const SimConnectConstants_1 = require("./SimConnectConstants");
const RecvFacilityData_1 = require("./recv/RecvFacilityData");
const RecvFacilityDataEnd_1 = require("./recv/RecvFacilityDataEnd");
const RecvFacilityMinimalList_1 = require("./recv/RecvFacilityMinimalList");
const RecvEventEx1_1 = require("./recv/RecvEventEx1");
const RECEIVE_SIZE = 65536;
const openPacketData = {
    [Protocol_1.Protocol.FSX_RTM]: {
        major: 0,
        minor: 0,
        buildMajor: 60905,
        buildMinor: 0,
        alias: 'XSF',
    },
    [Protocol_1.Protocol.FSX_SP1]: {
        major: 10,
        minor: 0,
        buildMajor: 61355,
        buildMinor: 0,
        alias: 'XSF',
    },
    [Protocol_1.Protocol.FSX_SP2]: {
        major: 10,
        minor: 0,
        buildMajor: 61259,
        buildMinor: 0,
        alias: 'XSF',
    },
    [Protocol_1.Protocol.KittyHawk]: {
        major: 11,
        minor: 0,
        buildMajor: 62651,
        buildMinor: 3,
        alias: 'HK', // "Hawk" + "Kitty"?
    },
};
var SimConnectError;
(function (SimConnectError) {
    SimConnectError["UnknownHost"] = "Unknown host";
    SimConnectError["GuidInvalidSize"] = "GUID is not 16 bytes long";
    SimConnectError["Unimplemented"] = "Not yet implemented";
    SimConnectError["VersionMismatch"] = "Invalid version2";
    SimConnectError["PacketTooLarge"] = "Packet too large";
    SimConnectError["InvalidRead"] = "Invalid read";
    SimConnectError["InvalidProtocol"] = "Invalid protocol version";
    SimConnectError["BadVersion"] = "Unsupported protocol version";
})(SimConnectError || (SimConnectError = {}));
class SimConnectConnection extends events_1.EventEmitter {
    constructor(appName, protocolVersion) {
        super();
        this.off = this.removeListener;
        this.addListener = this.on;
        this._appName = appName;
        this._packetsSent = 0;
        this._ourProtocol = protocolVersion;
        this._writeBuffer = new RawBuffer_1.RawBuffer(RECEIVE_SIZE);
        this._openTimeout = null;
        this._clientSocket = new SimConnectSocket_1.SimConnectSocket();
        this._clientSocket.on('connect', this._open.bind(this));
        this._clientSocket.on('data', this._handleMessage.bind(this));
        this._clientSocket.on('close', () => this.emit('close'));
        this._clientSocket.on('error', (connectError) => this.emit('error', connectError));
    }
    on(event, listener) {
        return super.on(event, listener);
    }
    once(event, listener) {
        return super.once(event, listener);
    }
    removeListener(event, listener) {
        return super.removeListener(event, listener);
    }
    removeAllListeners(event) {
        return super.removeAllListeners(event);
    }
    emit(event, ...args) {
        return super.emit(event, ...args);
    }
    connect(options) {
        if (options && 'host' in options && 'port' in options) {
            this._clientSocket.connect(Object.assign({ type: 'ipv4' }, options));
        }
        else if (options && 'remote' in options) {
            // For backwards-compatibility
            this._clientSocket.connect(Object.assign({ type: 'ipv4' }, options.remote));
        }
        else {
            (0, connectionParameters_1.autodetectServerAddress)(options === null || options === void 0 ? void 0 : options.simConnectCfgIndex).then((address) => {
                this._clientSocket.connect(address);
            });
        }
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    addToDataDefinition(dataDefinitionId, datumName, unitsName, dataType, epsilon, datumId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataDefinitionId);
        this._writeBuffer.writeString256(datumName);
        this._writeBuffer.writeString256(unitsName);
        this._writeBuffer.writeInt32(dataType === undefined ? SimConnectDataType_1.SimConnectDataType.FLOAT64 : dataType);
        this._writeBuffer.writeFloat32(epsilon || 0);
        this._writeBuffer.writeInt32(datumId === undefined ? SimConnectConstants_1.SimConnectConstants.UNUSED : datumId);
        return this._sendPacket(0x0c);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestDataOnSimObject(dataRequestId, dataDefinitionId, objectId, period, flags, origin, interval, limit) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeInt32(dataDefinitionId);
        this._writeBuffer.writeInt32(objectId);
        this._writeBuffer.writeInt32(period);
        this._writeBuffer.writeInt32(flags || 0);
        this._writeBuffer.writeInt32(origin || 0);
        this._writeBuffer.writeInt32(interval || 0);
        this._writeBuffer.writeInt32(limit || 0);
        return this._sendPacket(0x0e);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    clearDataDefinition(dataDefinitionId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataDefinitionId);
        return this._sendPacket(0x0d);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestDataOnSimObjectType(dataRequestId, dataDefinitionId, radiusMeters, type) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeInt32(dataDefinitionId);
        this._writeBuffer.writeInt32(radiusMeters);
        this._writeBuffer.writeInt32(type);
        return this._sendPacket(0x0f);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    subscribeToSystemEvent(clientEventId, eventName) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(clientEventId);
        this._writeBuffer.writeString256(eventName);
        return this._sendPacket(0x17);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    unsubscribeFromSystemEvent(clientEventId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(clientEventId);
        return this._sendPacket(0x18);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestSystemState(dataRequestId, state) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeString256(state);
        return this._sendPacket(0x35);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setSystemState(state, paramInt, paramFloat, paramString) {
        this._resetBuffer();
        this._writeBuffer.writeString256(state);
        this._writeBuffer.writeInt32(paramInt);
        this._writeBuffer.writeFloat32(paramFloat);
        this._writeBuffer.writeString256(paramString);
        this._writeBuffer.writeInt32(0);
        return this._sendPacket(0x36);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    addClientEventToNotificationGroup(notificationGroupId, clientEventId, maskable) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(notificationGroupId);
        this._writeBuffer.writeInt32(clientEventId);
        this._writeBuffer.writeInt32(maskable ? 1 : 0);
        return this._sendPacket(0x07);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    mapClientEventToSimEvent(clientEventId, eventName) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(clientEventId);
        this._writeBuffer.writeString256(eventName || '');
        return this._sendPacket(0x04);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    transmitClientEvent(objectId, clientEventId, data, notificationGroupId, flags) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(objectId);
        this._writeBuffer.writeInt32(clientEventId);
        this._writeBuffer.writeInt32(data);
        this._writeBuffer.writeInt32(notificationGroupId);
        this._writeBuffer.writeInt32(flags);
        return this._sendPacket(0x05);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setSystemEventState(clientEventId, state) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(clientEventId);
        this._writeBuffer.writeInt32(state ? 1 : 0);
        return this._sendPacket(0x06);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    removeClientEvent(notificationGroupId, clientEventId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(notificationGroupId);
        this._writeBuffer.writeInt32(clientEventId);
        return this._sendPacket(0x08);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setNotificationGroupPriority(notificationGroupId, priority) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(notificationGroupId);
        this._writeBuffer.writeInt32(priority);
        return this._sendPacket(0x09);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    clearNotificationGroup(notificationGroupId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(notificationGroupId);
        return this._sendPacket(0x0a);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestNotificationGroup(notificationGroupId, reserved, flags) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(notificationGroupId);
        this._writeBuffer.writeInt32(reserved);
        this._writeBuffer.writeInt32(flags);
        return this._sendPacket(0x0b);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setDataOnSimObject(dataDefinitionId, objectId, data) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataDefinitionId);
        this._writeBuffer.writeInt32(objectId);
        if (data instanceof Array) {
            this._writeBuffer.writeInt32(DataSetFlag_1.DataSetFlag.DEFAULT);
            this._writeBuffer.writeInt32(data.length);
            this._writeBuffer.writeInt32(0); // Just a placeholder for array unit size
            const arrayStartPos = this._writeBuffer.getOffset();
            data.forEach(simConnectData => {
                simConnectData.write(this._writeBuffer);
            });
            const arrayTotalSize = this._writeBuffer.getOffset() - arrayStartPos;
            const unitSize = arrayTotalSize / data.length;
            this._writeBuffer.writeInt32(unitSize, arrayStartPos - 4); // Replace placeholder
        }
        else {
            const { tagged, arrayCount, buffer } = data;
            this._writeBuffer.writeInt32(tagged ? DataSetFlag_1.DataSetFlag.TAGGED : DataSetFlag_1.DataSetFlag.DEFAULT);
            this._writeBuffer.writeInt32(arrayCount === 0 ? 1 : arrayCount);
            const bytes = buffer.getBuffer();
            this._writeBuffer.writeInt32(bytes.length);
            this._writeBuffer.write(bytes);
        }
        return this._sendPacket(0x10);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    mapInputEventToClientEvent(inputGroupId, inputDefinition, clientEventDownID, downValue, clientEventUpID, upValue, maskable) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(inputGroupId);
        this._writeBuffer.writeString256(inputDefinition);
        this._writeBuffer.writeInt32(clientEventDownID);
        this._writeBuffer.writeInt32(downValue || 0);
        this._writeBuffer.writeInt32(clientEventUpID === undefined ? SimConnectConstants_1.SimConnectConstants.UNUSED : clientEventUpID);
        this._writeBuffer.writeInt32(upValue || 0);
        this._writeBuffer.writeInt32(maskable ? 1 : 0);
        return this._sendPacket(0x11);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setInputGroupPriority(inputGroupId, priority) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(inputGroupId);
        this._writeBuffer.writeInt32(priority);
        return this._sendPacket(0x12);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    removeInputEvent(inputGroupId, inputDefinition) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(inputGroupId);
        this._writeBuffer.writeString256(inputDefinition);
        return this._sendPacket(0x13);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    clearInputGroup(inputGroupId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(inputGroupId);
        return this._sendPacket(0x14);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setInputGroupState(inputGroupId, state) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(inputGroupId);
        this._writeBuffer.writeInt32(state ? 1 : 0);
        return this._sendPacket(0x15);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestReservedKey(clientEventId, keyChoice1, keyChoice2, keyChoice3) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(clientEventId);
        this._writeBuffer.writeString30(keyChoice1 || '');
        this._writeBuffer.writeString30(keyChoice2 || '');
        this._writeBuffer.writeString30(keyChoice3 || '');
        return this._sendPacket(0x16);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRequestInterpolatedObservation(dataRequestId, lat, lon, alt) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeFloat32(lat);
        this._writeBuffer.writeFloat32(lon);
        this._writeBuffer.writeFloat32(alt);
        return this._sendPacket(0x19);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRequestObservationAtStation(dataRequestId, ICAO) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeString(ICAO, 5); // ICAO is 4 chars, null terminated
        return this._sendPacket(0x1a);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRequestObservationAtNearestStation(dataRequestId, lat, lon) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeFloat32(lat);
        this._writeBuffer.writeFloat32(lon);
        return this._sendPacket(0x1b);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherCreateStation(dataRequestId, ICAO, name, lat, lon, alt) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeString(ICAO, 5);
        this._writeBuffer.writeString(name, 256);
        this._writeBuffer.writeFloat32(lat);
        this._writeBuffer.writeFloat32(lon);
        this._writeBuffer.writeFloat32(alt);
        return this._sendPacket(0x1c);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRemoveStation(dataRequestId, ICAO) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeString(ICAO, 5);
        return this._sendPacket(0x1d);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetObservation(seconds, metar) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(seconds);
        this._writeBuffer.writeString(metar);
        this._writeBuffer.writeByte(0); // null terminated
        return this._sendPacket(0x1e);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetModeServer(port, seconds) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(port);
        this._writeBuffer.writeInt32(seconds);
        return this._sendPacket(0x1f);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetModeTheme(themeName) {
        this._resetBuffer();
        this._writeBuffer.writeString(themeName, 256);
        return this._sendPacket(0x20);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetModeGlobal() {
        this._resetBuffer();
        return this._sendPacket(0x21);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetModeCustom() {
        this._resetBuffer();
        return this._sendPacket(0x22);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetDynamicUpdateRate(rate) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(rate);
        return this._sendPacket(0x23);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRequestCloudState(dataRequestId, minLat, minLon, minAlt, maxLat, maxLon, maxAlt, flags) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeFloat32(minLat);
        this._writeBuffer.writeFloat32(minLon);
        this._writeBuffer.writeFloat32(minAlt);
        this._writeBuffer.writeFloat32(maxLat);
        this._writeBuffer.writeFloat32(maxLon);
        this._writeBuffer.writeFloat32(maxAlt);
        this._writeBuffer.writeInt32(flags || 0);
        return this._sendPacket(0x24);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherCreateThermal(dataRequestId, lat, lon, alt, radius, height, coreRate, coreTurbulence, sinkRate, sinkTurbulence, coreSize, coreTransitionSize, sinkLayerSize, sinkTransitionSize) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeFloat32(lat);
        this._writeBuffer.writeFloat32(lon);
        this._writeBuffer.writeFloat32(alt);
        this._writeBuffer.writeFloat32(radius);
        this._writeBuffer.writeFloat32(height);
        this._writeBuffer.writeFloat32(coreRate);
        this._writeBuffer.writeFloat32(coreTurbulence);
        this._writeBuffer.writeFloat32(sinkRate);
        this._writeBuffer.writeFloat32(sinkTurbulence);
        this._writeBuffer.writeFloat32(coreSize);
        this._writeBuffer.writeFloat32(coreTransitionSize);
        this._writeBuffer.writeFloat32(sinkLayerSize);
        this._writeBuffer.writeFloat32(sinkTransitionSize);
        return this._sendPacket(0x25);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRemoveThermal(objectId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(objectId);
        return this._sendPacket(0x26);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aICreateParkedATCAircraft(containerTitle, tailNumber, airportID, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeString(containerTitle, 256);
        this._writeBuffer.writeString(tailNumber, 12);
        this._writeBuffer.writeString(airportID, 5);
        this._writeBuffer.writeInt32(dataRequestId);
        return this._sendPacket(0x27);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aICreateEnrouteATCAircraft(containerTitle, tailNumber, flightNumber, flightPlanPath, flightPlanPosition, touchAndGo, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeString(containerTitle, 256);
        this._writeBuffer.writeString(tailNumber, 12);
        this._writeBuffer.writeInt32(flightNumber);
        this._writeBuffer.writeString(flightPlanPath, 260);
        this._writeBuffer.writeFloat64(flightPlanPosition);
        this._writeBuffer.writeInt32(touchAndGo ? 1 : 0);
        this._writeBuffer.writeInt32(dataRequestId);
        return this._sendPacket(0x28);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aICreateNonATCAircraft(containerTitle, tailNumber, initPos, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeString(containerTitle, 256);
        this._writeBuffer.writeString(tailNumber, 12);
        initPos.write(this._writeBuffer);
        this._writeBuffer.writeInt32(dataRequestId);
        return this._sendPacket(0x29);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aICreateSimulatedObject(containerTitle, initPos, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeString(containerTitle, 256);
        initPos.write(this._writeBuffer);
        this._writeBuffer.writeInt32(dataRequestId);
        return this._sendPacket(0x2a);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aIReleaseControl(objectId, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(objectId);
        this._writeBuffer.writeInt32(dataRequestId);
        return this._sendPacket(0x2b);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aIRemoveObject(objectId, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(objectId);
        this._writeBuffer.writeInt32(dataRequestId);
        return this._sendPacket(0x2c);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aISetAircraftFlightPlan(objectId, flightPlanPath, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(objectId);
        this._writeBuffer.writeString(flightPlanPath, 260);
        this._writeBuffer.writeInt32(dataRequestId);
        return this._sendPacket(0x2d);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    executeMissionAction(guidInstanceId) {
        if (guidInstanceId.length !== 16)
            throw Error(SimConnectError.GuidInvalidSize);
        this._resetBuffer();
        this._writeBuffer.write(guidInstanceId);
        return this._sendPacket(0x2e);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    completeCustomMissionAction(guidInstanceId) {
        if (guidInstanceId.length !== 16)
            throw Error(SimConnectError.GuidInvalidSize); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.write(guidInstanceId);
        return this._sendPacket(0x2f);
    }
    // eslint-disable-next-line
    requestResponseTimes(nCount) {
        // TODO: implement simconnect function
        // this one needs special care: it send a packet (id 0x03, one param : nCount)
        // and receive 8 float data (with response id 0x00010001) . Some calculations
        // has to be done
        throw Error(SimConnectError.Unimplemented);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    cameraSetRelative6DOF(deltaX, deltaY, deltaZ, pitchDeg, bankDeg, headingDeg) {
        this._resetBuffer();
        this._writeBuffer.writeFloat32(deltaX);
        this._writeBuffer.writeFloat32(deltaY);
        this._writeBuffer.writeFloat32(deltaZ);
        this._writeBuffer.writeFloat32(pitchDeg);
        this._writeBuffer.writeFloat32(bankDeg);
        this._writeBuffer.writeFloat32(headingDeg);
        return this._sendPacket(0x30);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menuAddItem(menuItem, menuEventId, data) {
        this._resetBuffer();
        this._writeBuffer.writeString(menuItem, 256);
        this._writeBuffer.writeInt32(menuEventId);
        this._writeBuffer.writeInt32(data);
        return this._sendPacket(0x31);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menuDeleteItem(menuEventId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(menuEventId);
        return this._sendPacket(0x32);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menuAddSubItem(menuEventId, menuItem, subMenuEventId, data) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(menuEventId);
        this._writeBuffer.writeString(menuItem, 256);
        this._writeBuffer.writeInt32(subMenuEventId);
        this._writeBuffer.writeInt32(data);
        return this._sendPacket(0x33);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menuDeleteSubItem(menuEventId, subMenuEventId) {
        // packet size 0x18
        // packet id 0x34
        this._resetBuffer();
        this._writeBuffer.writeInt32(menuEventId);
        this._writeBuffer.writeInt32(subMenuEventId);
        return this._sendPacket(0x34);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    mapClientDataNameToID(clientDataName, clientDataId) {
        this._resetBuffer();
        this._writeBuffer.writeString(clientDataName, 256);
        this._writeBuffer.writeInt32(clientDataId);
        return this._sendPacket(0x37);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    createClientData(clientDataId, size, readOnly) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(clientDataId);
        this._writeBuffer.writeInt32(size);
        this._writeBuffer.writeInt32(readOnly ? 1 : 0);
        return this._sendPacket(0x38);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    addToClientDataDefinition(dataDefinitionId, offset, sizeOrType, epsilon, datumId) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataDefinitionId);
        this._writeBuffer.writeInt32(offset);
        this._writeBuffer.writeInt32(sizeOrType);
        this._writeBuffer.writeFloat32(epsilon || 0);
        this._writeBuffer.writeInt32(datumId || 0);
        return this._sendPacket(0x39);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    clearClientDataDefinition(dataDefinitionId) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataDefinitionId);
        return this._sendPacket(0x3a);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestClientData(clientDataId, dataRequestId, clientDataDefineID, period, flags, origin, interval, limit) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt32(clientDataId);
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeInt32(clientDataDefineID);
        this._writeBuffer.writeInt32(period);
        this._writeBuffer.writeInt32(flags);
        this._writeBuffer.writeInt32(origin || 0);
        this._writeBuffer.writeInt32(interval || 0);
        this._writeBuffer.writeInt32(limit || 0);
        return this._sendPacket(0x3b);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setClientData(clientDataId, clientDataDefineID, reserved, arrayCount, unitSize, data) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(clientDataId);
        this._writeBuffer.writeInt32(clientDataDefineID);
        this._writeBuffer.writeInt32(0); // do not use arg
        this._writeBuffer.writeInt32(1); // do not use arg
        // TODO: add support for arrays https://github.com/mharj/jsimconnect/blob/master/src/flightsim/simconnect/SimConnect.java#L3803
        this._writeBuffer.writeInt32(unitSize);
        this._writeBuffer.write(data);
        return this._sendPacket(0x3c);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    flightLoad(fileName) {
        // packet size 0x114
        // packet id 0x3D
        this._resetBuffer();
        this._writeBuffer.writeString(fileName, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        return this._sendPacket(0x3d);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    flightSave(fileName, title, description, flags // eslint-disable-line
    ) {
        // packet size 0x918 (SP1), 0xA1C (SP2)
        // packet id 0x3E
        this._resetBuffer();
        this._writeBuffer.writeString(fileName, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        if (this._ourProtocol >= Protocol_1.Protocol.FSX_SP2) {
            this._writeBuffer.writeString(title === null ? fileName : title, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        }
        this._writeBuffer.writeString(description, 2048);
        this._writeBuffer.writeInt32(SimConnectConstants_1.SimConnectConstants.UNUSED);
        return this._sendPacket(0x3e);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    flightPlanLoad(fileName) {
        // packet size 0x114
        // packet id 0x3F
        this._resetBuffer();
        this._writeBuffer.writeString(fileName, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        return this._sendPacket(0x3f);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    text(type, timeSeconds, clientEventId, message) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        // packet id 0x40
        this._resetBuffer();
        this._writeBuffer.writeInt32(type);
        this._writeBuffer.writeFloat32(timeSeconds);
        this._writeBuffer.writeInt32(clientEventId);
        if (message !== null && message.length > 0) {
            this._writeBuffer.writeInt32(message.length + 1);
            this._writeBuffer.writeString(message);
        }
        else {
            this._writeBuffer.writeInt32(1);
        }
        this._writeBuffer.writeByte(0);
        return this._sendPacket(0x40);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menu(timeSeconds, clientEventId, title, prompt, ...items) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        // packet id 0x40
        this._resetBuffer();
        this._writeBuffer.writeInt32(TextType_1.TextType.MENU);
        this._writeBuffer.writeFloat32(timeSeconds);
        this._writeBuffer.writeInt32(clientEventId);
        this._writeBuffer.writeInt32(0); // size, will be set later
        if (!title && !prompt && items.length === 0) {
            this._writeBuffer.writeByte(0);
        }
        else if (title && prompt) {
            this._writeBuffer.writeString(title);
            this._writeBuffer.writeByte(0);
            this._writeBuffer.writeString(prompt);
            this._writeBuffer.writeByte(0);
            items.forEach(s => {
                this._writeBuffer.writeString(s);
                this._writeBuffer.writeByte(0);
            });
        }
        // set size
        this._writeBuffer.writeInt32(this._writeBuffer.getOffset() - 32, 28);
        return this._sendPacket(0x40);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    subscribeToFacilities(type, clientEventId) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        // ID 0x41
        this._resetBuffer();
        this._writeBuffer.writeInt32(type);
        this._writeBuffer.writeInt32(clientEventId);
        return this._sendPacket(0x41);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    subscribeToFacilitiesEx1(type, newElemInRangeRequestID, oldElemOutRangeRequestID) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt32(type);
        this._writeBuffer.writeInt32(newElemInRangeRequestID);
        this._writeBuffer.writeInt32(oldElemOutRangeRequestID);
        return this._sendPacket(0x47);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    unSubscribeToFacilities(type) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        // ID 0x42
        this._resetBuffer();
        this._writeBuffer.writeInt32(type);
        return this._sendPacket(0x42);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    unSubscribeToFacilitiesEx1(type, unsubscribeNewInRange, unsubscribeOldOutRange) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt32(type);
        this._writeBuffer.writeString(unsubscribeNewInRange ? '1' : '0', 1);
        this._writeBuffer.writeString(unsubscribeOldOutRange ? '1' : '0', 1);
        return this._sendPacket(0x48);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestFacilitiesList(type, clientEventId) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt32(type);
        this._writeBuffer.writeInt32(clientEventId);
        return this._sendPacket(0x43);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestFacilitiesListEx1(type, clientEventId) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt32(type);
        this._writeBuffer.writeInt32(clientEventId);
        return this._sendPacket(0x49);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    transmitClientEventEx(objectId, clientEventId, notificationGroupId, flags, data0 = 0, data1 = 0, data2 = 0, data3 = 0, data4 = 0) {
        this._resetBuffer();
        this._writeBuffer.writeInt32(objectId);
        this._writeBuffer.writeInt32(clientEventId);
        this._writeBuffer.writeInt32(notificationGroupId);
        this._writeBuffer.writeInt32(flags);
        this._writeBuffer.writeInt32(data0);
        this._writeBuffer.writeInt32(data1);
        this._writeBuffer.writeInt32(data2);
        this._writeBuffer.writeInt32(data3);
        this._writeBuffer.writeInt32(data4);
        return this._sendPacket(0x44);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    addToFacilityDefinition(dataDefinitionId, fieldName) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataDefinitionId);
        this._writeBuffer.writeString256(fieldName);
        return this._sendPacket(0x45);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestFacilityData(dataDefinitionId, dataRequestId, icao, region, type) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        this._resetBuffer();
        this._writeBuffer.writeInt32(dataDefinitionId);
        this._writeBuffer.writeInt32(dataRequestId);
        this._writeBuffer.writeString(icao, 16);
        this._writeBuffer.writeString(region || '', 4);
        if (type === undefined) {
            // SimConnect_RequestFacilityData
            return this._sendPacket(0x46);
        }
        // SimConnect_RequestFacilityData_EX1
        this._writeBuffer.writeString(type, 1);
        return this._sendPacket(0x4a);
    }
    close() {
        if (this._openTimeout !== null) {
            clearTimeout(this._openTimeout);
            this._openTimeout = null;
        }
        this._clientSocket.close();
    }
    getLastSentPacketID() {
        return this._packetsSent - 1;
    }
    _handleMessage({ packetTypeId, data }) {
        if (!(packetTypeId in SimConnectSocket_1.RecvID)) {
            console.log('Unknown packet type id', packetTypeId, data);
        }
        switch (packetTypeId) {
            case SimConnectSocket_1.RecvID.ID_NULL:
                break;
            case SimConnectSocket_1.RecvID.ID_EXCEPTION:
                this.emit('exception', new recv_1.RecvException(data));
                break;
            case SimConnectSocket_1.RecvID.ID_OPEN:
                if (this._openTimeout !== null) {
                    clearTimeout(this._openTimeout);
                    this._openTimeout = null;
                }
                this.emit('open', new recv_1.RecvOpen(data));
                break;
            case SimConnectSocket_1.RecvID.ID_QUIT:
                this.emit('quit');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT:
                this.emit('event', new recv_1.RecvEvent(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_OBJECT_ADDREMOVE:
                this.emit('eventAddRemove', new recv_1.RecvEventAddRemove(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_FILENAME:
                this.emit('eventFilename', new recv_1.RecvEventFilename(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_FRAME:
                this.emit('eventFrame', new recv_1.RecvEventFrame(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SIMOBJECT_DATA:
                this.emit('simObjectData', new recv_1.RecvSimObjectData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SIMOBJECT_DATA_BYTYPE:
                this.emit('simObjectDataByType', new recv_1.RecvSimObjectData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_WEATHER_OBSERVATION:
                this.emit('weatherObservation', new recv_1.RecvWeatherObservation(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CLOUD_STATE:
                this.emit('cloudState', new recv_1.RecvCloudState(data));
                break;
            case SimConnectSocket_1.RecvID.ID_ASSIGNED_OBJECT_ID:
                this.emit('assignedObjectID', new recv_1.RecvAssignedObjectID(data));
                break;
            case SimConnectSocket_1.RecvID.ID_RESERVED_KEY:
                this.emit('reservedKey', new recv_1.RecvReservedKey(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CUSTOM_ACTION:
                this.emit('customAction', new recv_1.RecvCustomAction(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SYSTEM_STATE:
                this.emit('systemState', new recv_1.RecvSystemState(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CLIENT_DATA:
                this.emit('clientData', new recv_1.RecvSimObjectData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_WEATHER_MODE:
                this.emit('eventWeatherMode', new recv_1.RecvEventWeatherMode(data));
                break;
            case SimConnectSocket_1.RecvID.ID_AIRPORT_LIST:
                this.emit('airportList', new recv_1.RecvAirportList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_VOR_LIST:
                this.emit('vorList', new recv_1.RecvVORList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_NDB_LIST:
                this.emit('ndbList', new recv_1.RecvNDBList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_WAYPOINT_LIST:
                this.emit('waypointList', new recv_1.RecvWaypointList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_MULTIPLAYER_SERVER_STARTED:
                this.emit('eventMultiplayerServerStarted');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_MULTIPLAYER_CLIENT_STARTED:
                this.emit('eventMultiplayerClientStarted');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_MULTIPLAYER_SESSION_ENDED:
                this.emit('eventMultiplayerSessionEnded');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_RACE_END:
                this.emit('eventRaceEnd', new recv_1.RecvEventRaceEnd(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_RACE_LAP:
                this.emit('eventRaceLap', new recv_1.RecvEventRaceLap(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_EX1:
                this.emit('eventEx1', new RecvEventEx1_1.RecvEventEx1(data));
                break;
            case SimConnectSocket_1.RecvID.ID_FACILITY_DATA:
                this.emit('facilityData', new RecvFacilityData_1.RecvFacilityData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_FACILITY_DATA_END:
                this.emit('facilityDataEnd', new RecvFacilityDataEnd_1.RecvFacilityDataEnd(data));
                break;
            case SimConnectSocket_1.RecvID.ID_FACILITY_MINIMAL_LIST:
                this.emit('facilityMinimalList', new RecvFacilityMinimalList_1.RecvFacilityMinimalList(data));
                break;
        }
    }
    _resetBuffer() {
        this._writeBuffer.clear();
        this._writeBuffer.setOffset(16); // Bytes 0-16 are for the packet header
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    _sendPacket(type) {
        const packetSize = this._writeBuffer.getOffset();
        // Replace byte 0-16 with package header
        this._writeBuffer.writeInt32(packetSize, 0);
        this._writeBuffer.writeInt32(this._ourProtocol, 4);
        this._writeBuffer.writeInt32(0xf0000000 | type, 8);
        const sendId = this._packetsSent++;
        this._writeBuffer.writeInt32(sendId, 12);
        const data = this._writeBuffer.getBuffer();
        this._clientSocket.write(data);
        return sendId;
    }
    _open() {
        this._openTimeout = setTimeout(() => {
            this.close();
            this.emit('error', Error('Open timeout'));
        }, 5000);
        const version = openPacketData[this._ourProtocol];
        if (!version) {
            throw Error(SimConnectError.InvalidProtocol); // $NON-NLS-1$
        }
        this._resetBuffer();
        this._writeBuffer.writeString256(this._appName);
        this._writeBuffer.writeInt32(0);
        this._writeBuffer.writeByte(0x00);
        this._writeBuffer.writeString(version.alias, 3);
        this._writeBuffer.writeInt32(version.major);
        this._writeBuffer.writeInt32(version.minor);
        this._writeBuffer.writeInt32(version.buildMajor);
        this._writeBuffer.writeInt32(version.buildMinor);
        this._sendPacket(0x01);
    }
}
exports.SimConnectConnection = SimConnectConnection;
module.exports = { SimConnectConnection };
//# sourceMappingURL=data:application/json;base64,