"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Waypoint = void 0;
class Waypoint {
    constructor() {
        /** Latitude of waypoint, in degrees */
        this.latitude = 0;
        /** Longitude of waypoint, in degrees  */
        this.longitude = 0;
        /** Altitude of waypoint, in feet */
        this.altitude = 0;
        /** flags of waypoints
         * @see flightsim.simconnect.SimConnectConstants#WAYPOINT_ON_GROUND
         * @see flightsim.simconnect.SimConnectConstants#WAYPOINT_REVERSE
         * @see flightsim.simconnect.SimConnectConstants#WAYPOINT_ALTITUDE_IS_AGL
         * @see flightsim.simconnect.SimConnectConstants#WAYPOINT_COMPUTE_VERTICAL_SPEED
         * @see flightsim.simconnect.SimConnectConstants#WAYPOINT_SPEED_REQUESTED
         * @see flightsim.simconnect.SimConnectConstants#WAYPOINT_THROTTLE_REQUESTED
         *
         */
        this.flags = 0;
        /** Speed, in kots. {@link flightsim.simconnect.SimConnectConstants#WAYPOINT_SPEED_REQUESTED} must be on */
        this.speed = 0;
        /** Throttle, in percent {@link flightsim.simconnect.SimConnectConstants#WAYPOINT_THROTTLE_REQUESTED} must be on */
        this.throttle = 0;
    }
    read(buffer) {
        this.latitude = buffer.readFloat64();
        this.longitude = buffer.readFloat64();
        this.altitude = buffer.readFloat64();
        this.flags = buffer.readInt32();
        this.speed = buffer.readFloat64();
        this.throttle = buffer.readFloat64();
    }
    write(buffer) {
        buffer.writeFloat64(this.latitude);
        buffer.writeFloat64(this.longitude);
        buffer.writeFloat64(this.altitude);
        buffer.writeInt32(this.flags);
        buffer.writeFloat64(this.speed);
        buffer.writeFloat64(this.throttle);
    }
}
exports.Waypoint = Waypoint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2F5cG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZHRvL1dheXBvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLE1BQU0sUUFBUTtJQUFkO1FBQ0ksdUNBQXVDO1FBQ3ZDLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFFYix5Q0FBeUM7UUFDekMsY0FBUyxHQUFHLENBQUMsQ0FBQztRQUVkLG9DQUFvQztRQUNwQyxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRWI7Ozs7Ozs7O1dBUUc7UUFDSCxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRVYsMkdBQTJHO1FBQzNHLFVBQUssR0FBRyxDQUFDLENBQUM7UUFFVixtSEFBbUg7UUFDbkgsYUFBUSxHQUFHLENBQUMsQ0FBQztJQW1CakIsQ0FBQztJQWpCRyxJQUFJLENBQUMsTUFBaUI7UUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFpQjtRQUNuQixNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0o7QUFFUSw0QkFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpbUNvbm5lY3REYXRhIH0gZnJvbSAnLi9TaW1Db25uZWN0RGF0YSc7XG5pbXBvcnQgeyBSYXdCdWZmZXIgfSBmcm9tICcuLi9SYXdCdWZmZXInO1xuXG5jbGFzcyBXYXlwb2ludCBpbXBsZW1lbnRzIFNpbUNvbm5lY3REYXRhIHtcbiAgICAvKiogTGF0aXR1ZGUgb2Ygd2F5cG9pbnQsIGluIGRlZ3JlZXMgKi9cbiAgICBsYXRpdHVkZSA9IDA7XG5cbiAgICAvKiogTG9uZ2l0dWRlIG9mIHdheXBvaW50LCBpbiBkZWdyZWVzICAqL1xuICAgIGxvbmdpdHVkZSA9IDA7XG5cbiAgICAvKiogQWx0aXR1ZGUgb2Ygd2F5cG9pbnQsIGluIGZlZXQgKi9cbiAgICBhbHRpdHVkZSA9IDA7XG5cbiAgICAvKiogZmxhZ3Mgb2Ygd2F5cG9pbnRzXG4gICAgICogQHNlZSBmbGlnaHRzaW0uc2ltY29ubmVjdC5TaW1Db25uZWN0Q29uc3RhbnRzI1dBWVBPSU5UX09OX0dST1VORFxuICAgICAqIEBzZWUgZmxpZ2h0c2ltLnNpbWNvbm5lY3QuU2ltQ29ubmVjdENvbnN0YW50cyNXQVlQT0lOVF9SRVZFUlNFXG4gICAgICogQHNlZSBmbGlnaHRzaW0uc2ltY29ubmVjdC5TaW1Db25uZWN0Q29uc3RhbnRzI1dBWVBPSU5UX0FMVElUVURFX0lTX0FHTFxuICAgICAqIEBzZWUgZmxpZ2h0c2ltLnNpbWNvbm5lY3QuU2ltQ29ubmVjdENvbnN0YW50cyNXQVlQT0lOVF9DT01QVVRFX1ZFUlRJQ0FMX1NQRUVEXG4gICAgICogQHNlZSBmbGlnaHRzaW0uc2ltY29ubmVjdC5TaW1Db25uZWN0Q29uc3RhbnRzI1dBWVBPSU5UX1NQRUVEX1JFUVVFU1RFRFxuICAgICAqIEBzZWUgZmxpZ2h0c2ltLnNpbWNvbm5lY3QuU2ltQ29ubmVjdENvbnN0YW50cyNXQVlQT0lOVF9USFJPVFRMRV9SRVFVRVNURURcbiAgICAgKlxuICAgICAqL1xuICAgIGZsYWdzID0gMDtcblxuICAgIC8qKiBTcGVlZCwgaW4ga290cy4ge0BsaW5rIGZsaWdodHNpbS5zaW1jb25uZWN0LlNpbUNvbm5lY3RDb25zdGFudHMjV0FZUE9JTlRfU1BFRURfUkVRVUVTVEVEfSBtdXN0IGJlIG9uICovXG4gICAgc3BlZWQgPSAwO1xuXG4gICAgLyoqIFRocm90dGxlLCBpbiBwZXJjZW50IHtAbGluayBmbGlnaHRzaW0uc2ltY29ubmVjdC5TaW1Db25uZWN0Q29uc3RhbnRzI1dBWVBPSU5UX1RIUk9UVExFX1JFUVVFU1RFRH0gbXVzdCBiZSBvbiAqL1xuICAgIHRocm90dGxlID0gMDtcblxuICAgIHJlYWQoYnVmZmVyOiBSYXdCdWZmZXIpIHtcbiAgICAgICAgdGhpcy5sYXRpdHVkZSA9IGJ1ZmZlci5yZWFkRmxvYXQ2NCgpO1xuICAgICAgICB0aGlzLmxvbmdpdHVkZSA9IGJ1ZmZlci5yZWFkRmxvYXQ2NCgpO1xuICAgICAgICB0aGlzLmFsdGl0dWRlID0gYnVmZmVyLnJlYWRGbG9hdDY0KCk7XG4gICAgICAgIHRoaXMuZmxhZ3MgPSBidWZmZXIucmVhZEludDMyKCk7XG4gICAgICAgIHRoaXMuc3BlZWQgPSBidWZmZXIucmVhZEZsb2F0NjQoKTtcbiAgICAgICAgdGhpcy50aHJvdHRsZSA9IGJ1ZmZlci5yZWFkRmxvYXQ2NCgpO1xuICAgIH1cblxuICAgIHdyaXRlKGJ1ZmZlcjogUmF3QnVmZmVyKSB7XG4gICAgICAgIGJ1ZmZlci53cml0ZUZsb2F0NjQodGhpcy5sYXRpdHVkZSk7XG4gICAgICAgIGJ1ZmZlci53cml0ZUZsb2F0NjQodGhpcy5sb25naXR1ZGUpO1xuICAgICAgICBidWZmZXIud3JpdGVGbG9hdDY0KHRoaXMuYWx0aXR1ZGUpO1xuICAgICAgICBidWZmZXIud3JpdGVJbnQzMih0aGlzLmZsYWdzKTtcbiAgICAgICAgYnVmZmVyLndyaXRlRmxvYXQ2NCh0aGlzLnNwZWVkKTtcbiAgICAgICAgYnVmZmVyLndyaXRlRmxvYXQ2NCh0aGlzLnRocm90dGxlKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFdheXBvaW50IH07XG4iXX0=